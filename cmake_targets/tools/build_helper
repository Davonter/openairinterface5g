#/*
# * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
# * contributor license agreements.  See the NOTICE file distributed with
# * this work for additional information regarding copyright ownership.
# * The OpenAirInterface Software Alliance licenses this file to You under
# * the OAI Public License, Version 1.0  (the "License"); you may not use this file
# * except in compliance with the License.
# * You may obtain a copy of the License at
# *
# *      http://www.openairinterface.org/?page_id=698
# *
# * Unless required by applicable law or agreed to in writing, software
# * distributed under the License is distributed on an "AS IS" BASIS,
# * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# * See the License for the specific language governing permissions and
# * limitations under the License.
# *-------------------------------------------------------------------------------
# * For more information about the OpenAirInterface (OAI) Software Alliance:
# *      contact@openairinterface.org
# */

# file build_helper
# brief
# authors Laurent Thomas, Lionel GAUTHIER
#
#######################################
SUDO='sudo -E'

###############################
## echo and  family
###############################
black='\E[30m'
red='\E[31m'
green='\E[32m'
yellow='\E[33m'
blue='\E[1;34m'
magenta='\E[35m'
cyan='\E[36m'
white='\E[37m'
reset_color='\E[00m'
COLORIZE=1

cecho()  {  
    # Color-echo
    # arg1 = message
    # arg2 = color
    local default_msg="No Message."
    message=${1:-$default_msg}
    color=${2:-$green}
    [ "$COLORIZE" = "1" ] && message="$color$message$reset_color"
    echo -e "$message"
    return
}

echo_error()   { cecho "$*" $red          ;}
echo_fatal()   { cecho "$*" $red; exit -1 ;}
echo_warning() { cecho "$*" $yellow       ;}
echo_success() { cecho "$*" $green        ;}
echo_info()    { cecho "$*" $blue         ;}

########################
# distribution helpers #
########################

# This function return a string to identify the distribution we are running
# If we can't check the distribution, it returns "Unknown"
# This function return always true as exit code by design
# Examples:
#   Ubuntu16.04
#   Debian8.5
get_distribution_release() {
    local distributor
    if distributor=$(lsb_release -si 2>/dev/null) ; then
        echo $distributor$(lsb_release -sr)
    else
        echo Unknown
    fi
}

check_supported_distribution() {
    local distribution=$(get_distribution_release)
    case "$distribution" in
        "Ubuntu16.04") return 0 ;;
        "Ubuntu14.04") return 0 ;;
    esac
    return 1
}

##################
# Error handlers #
##################

handler_EXIT() {
	local exit_code=$?
    [ "$exit_code" -eq 0 ] || echo_error "build have failed"
	exit $exit_code
}

trap handler_EXIT EXIT

###########################
# Cleaners
###########################

clean_kernel() {
    $SUDO modprobe ip_tables
    $SUDO modprobe x_tables
    $SUDO iptables -P INPUT ACCEPT
    $SUDO iptables -F INPUT
    $SUDO iptables -P OUTPUT ACCEPT
    $SUDO iptables -F OUTPUT
    $SUDO iptables -P FORWARD ACCEPT
    $SUDO iptables -F FORWARD
    $SUDO iptables -t nat -F
    $SUDO iptables -t mangle -F
    $SUDO iptables -t filter -F
    $SUDO iptables -t raw -F
    echo_info "Flushed iptables"
    $SUDO rmmod nasmesh > /dev/null 2>&1
    $SUDO rmmod oai_nw_drv  > /dev/null 2>&1
    $SUDO rmmod openair_rf > /dev/null 2>&1
    $SUDO rmmod ue_ip > /dev/null 2>&1
    echo_info "removed drivers from kernel"
}

clean_all_files() {
 set_openair_env
 dir=$OPENAIR_DIR/cmake_targets
 rm -rf $dir/log $OPENAIR_DIR/targets/bin/* 
 rm -rf $dir/lte_build_oai $dir/lte-simulators/build
 rm -rf $dir/oaisim_build_oai/build $dir/oaisim_build_oai/CMakeLists.txt
 rm -rf $dir/autotests/bin $dir/autotests/log $dir/autotests/*/build 
}

###################################
# Compilers
###################################

compilations() {
  cd $OPENAIR_DIR/cmake_targets/$1/build
  set +e
  {
    rm -f $3
    if [ "$VERBOSE_COMPILE" == "1" ]; then
       make -j`nproc` $2 VERBOSE=$VERBOSE_COMPILE
    else
       make -j`nproc` $2
    fi

  } > $dlog/$2.$REL.txt 2>&1
  set -e
  echo_info "Log file for compilation has been written to: $dlog/$2.$REL.txt"
  if [ -s $3 ] ; then
     cp $3 $4
     echo_success "$2 compiled"
  else
     echo_error "$2 compilation failed"
     exit 1
  fi
}

############################################
# External packages installers
############################################

install_protobuf_from_source(){
    protobuf_install_log=$OPENAIR_DIR/cmake_targets/log/protobuf_install_log.txt
    echo_info "\nInstalling Google Protobuf from sources. The log file for Protobuf installation is here: $protobuf_install_log "
    (
    cd /tmp
    echo "Downloading protobuf"
    rm -rf /tmp/protobuf-2.6.1.tar.gz* /tmp/protobuf-2.6.1
    #wget https://github.com/google/protobuf/releases/download/v2.6.1/protobuf-2.6.1.tar.gz
	wget https://download.videolan.org/pub/contrib/protobuf/protobuf-2.6.1.tar.gz
    tar -xzvf protobuf-2.6.1.tar.gz
    cd protobuf-2.6.1/
    ./configure
    echo "Compiling protobuf"
    make -j`nproc`
    $SUDO make install
    $SUDO ldconfig
    ) >& $protobuf_install_log
}

install_protobuf_c_from_source(){
    protobuf_c_install_log=$OPENAIR_DIR/cmake_targets/log/protobuf_c_install_log.txt
    echo_info "\nInstalling Google Protobuf_C from sources. The log file for Protobuf_C installation is here: $protobuf_c_install_log "
    (
    cd /tmp
    echo "Downloading protobuf-c"
    rm -rf /tmp/protobuf-c
    git clone https://github.com/protobuf-c/protobuf-c.git
    cd protobuf-c
	git checkout 2a46af42784abf86804d536f6e0122d47cfeea45
    ./autogen.sh
    ./configure
    echo "Compiling protobuf-c"
    make -j`nproc`
    $SUDO make install
    $SUDO ldconfig
    ) >& $protobuf_c_install_log
}

check_install_usrp_uhd_driver(){
        #first we remove old installation
        $SUDO apt-get remove -y uhd || true
        $SUDO apt-get remove libuhd-dev libuhd003 uhd-host -y
        v=$(lsb_release -cs)
        $SUDO apt-add-repository --remove "deb http://files.ettus.com/binaries/uhd/repo/uhd/ubuntu/$v $v main"
        #The new USRP repository
        $SUDO add-apt-repository ppa:ettusresearch/uhd -y
        $SUDO apt-get update
        $SUDO apt-get -y install  python python-tk libboost-all-dev libusb-1.0-0-dev
        $SUDO apt-get -y install libuhd-dev libuhd003 uhd-host
}

install_usrp_uhd_driver() {
        # We move uhd-host apart because it depends on linux kernel version
        # On newer kernels, it fails to install
        $SUDO apt-get -y install uhd-host
        $SUDO uhd_images_downloader 
}

check_install_bladerf_driver(){
	if [ "$(get_distribution_release)" == "Ubuntu14.04" ] ; then
		$SUDO add-apt-repository -y ppa:bladerf/bladerf
		$SUDO apt-get update
	fi
	$SUDO apt-get install -y bladerf libbladerf-dev
	$SUDO apt-get install -y bladerf-firmware-fx3
	$SUDO apt-get install -y bladerf-fpga-hostedx40	
}

flash_firmware_bladerf() {
	$SUDO bladeRF-cli --flash-firmware /usr/share/Nuand/bladeRF/bladeRF_fw.img
}

check_install_additional_tools (){
    $SUDO apt-get update
    $SUDO apt-get install -y \
	check \
	dialog \
	dkms \
	gawk \
	libboost-all-dev \
	libpthread-stubs0-dev \
	openvpn \
	pkg-config \
	python-dev  \
	python-pexpect \
	sshfs \
	swig  \
	tshark \
	uml-utilities \
	unzip  \
	valgrind  \
	vlan	  \
	ctags \
        ntpdate \
        iperf3 \
        android-tools-adb \
	wvdial \
        python-numpy \
        sshpass \
        nscd \
        bc \
        ntp \
        python-scipy \
        python-matplotlib

    $SUDO pip install paramiko
    $SUDO pip install pyroute2 colorama
    $SUDO rm -fr /opt/ssh
    $SUDO GIT_SSL_NO_VERIFY=true git clone https://gitlab.eurecom.fr/oai/ssh.git /opt/ssh
    
    log_netiface=$OPENAIR_DIR/cmake_targets/log/netiface_install_log.txt
    echo_info "Installing Netinterfaces package. The logfile for installation is in $log_netiface"
    (
    $SUDO rm -fr /tmp/netifaces-0.10.4.tar.gz /tmp/netifaces
    wget -P /tmp  https://pypi.python.org/packages/18/fa/dd13d4910aea339c0bb87d2b3838d8fd923c11869b1f6e741dbd0ff3bc00/netifaces-0.10.4.tar.gz
    tar -xzvf /tmp/netifaces-0.10.4.tar.gz -C /tmp
    cd /tmp/netifaces-0.10.4
    $SUDO python setup.py install
    cd -
    ) >& $log_netiface
}

check_install_oai_software() {
    local specific_packages=""
    if ! check_supported_distribution; then
        echo_error "Your distribution $(get_distribution_release) is not supported by oai !"
        exit 1
    fi
    $SUDO apt-get update
    $SUDO apt install -y software-properties-common
    case "$(get_distribution_release)" in
        "Ubuntu14.04")
            specific_packages="libtasn1-3-dev"
            # For iperf3
            $SUDO add-apt-repository "deb http://archive.ubuntu.com/ubuntu trusty-backports universe"
            $SUDO apt-get update
            ;;
        "Ubuntu16.04")
            specific_packages="libtasn1-6-dev"
            ;;
    esac
    $SUDO apt-get install -y \
    $specific_packages \
	autoconf  \
	automake  \
	bison  \
	build-essential \
	cmake \
	cmake-curses-gui  \
	doxygen \
	doxygen-gui \
	texlive-latex-base \
	ethtool \
	flex  \
	gccxml \
	gdb  \
	git \
	graphviz \
	gtkwave \
	guile-2.0-dev  \
	iperf \
	iproute \
	iptables \
	iptables-dev \
	libatlas-base-dev \
	libatlas-dev \
	libblas-dev \
	libconfig8-dev \
	libffi-dev \
	libforms-bin \
	libforms-dev \
	libgcrypt11-dev \
	libgmp-dev \
	libgtk-3-dev \
	libidn2-0-dev  \
	libidn11-dev \
	libmysqlclient-dev  \
	liboctave-dev \
	libpgm-dev \
	libpython2.7-dev \
	libsctp1  \
	libsctp-dev  \
	libssl-dev  \
	libtool  \
	libusb-1.0-0-dev \
	libxml2 \
	libxml2-dev  \
	libxslt1-dev \
	mscgen  \
	octave \
	octave-signal \
	openssh-client \
	openssh-server \
	openssl \
	python  \
	subversion \
	xmlstarlet \
	python-pip \
	pydb \
	libyaml-dev \
	wget

    $SUDO update-alternatives --set liblapack.so /usr/lib/atlas-base/atlas/liblapack.so
    
    #Remove old gnutls/nettle installation that was done from sources
    remove_nettle_from_source
    
    $SUDO apt-get install -y nettle-dev nettle-bin
    remove_gnutls_from_source

    $SUDO apt-get install -y libgnutls-dev
    
    install_asn1c_from_source
    $SUDO rm -fr /opt/ssh
    #$SUDO git clone https://gist.github.com/2190472.git /opt/ssh
	$SUDO git clone https://github.com/xrh003/ssh.git /opt/ssh
    install_protobuf_from_source
    install_protobuf_c_from_source
}

### Remove Nettle installation which was done from sources
remove_nettle_from_source() {
    nettle_uninstall_log=$OPENAIR_DIR/cmake_targets/log/nettle_uninstall_log.txt
    echo_info "\nUn-Installing Nettle from sources. The log file for nettle un-installation is here: $nettle_uninstall_log "
    (
    $SUDO apt-get remove -y nettle-dev nettle-bin 
    cd /tmp
    echo "Downloading nettle archive"
    $SUDO rm -rf /tmp/nettle-2.5.tar.gz* /tmp/nettle-2.5
    wget https://ftp.gnu.org/gnu/nettle/nettle-2.5.tar.gz
    if [ $? -ne 0 ]; then
      wget ftp://ftp.lysator.liu.se/pub/security/lsh/nettle-2.5.tar.gz
    fi
    if [ ! -f nettle-2.5.tar.gz ]; then
      echo_error "Could not download nettle source files"
      cd -
      return
    fi
    tar -xzf nettle-2.5.tar.gz
    cd nettle-2.5/
    ./configure --disable-openssl --enable-shared --prefix=/usr 
    $SUDO make uninstall || true 
    $SUDO ldconfig
    ) >& $nettle_uninstall_log
}

### Remove Gnutls from source
remove_gnutls_from_source(){
    gnutls_uninstall_log=$OPENAIR_DIR/cmake_targets/log/gnutls_uninstall_log.txt
    echo_info "\nUn-Installing Gnutls. The log file for Gnutls un-installation is here: $gnutls_uninstall_log "
    (
    $SUDO apt-get remove -y libgnutls-dev
    cd /tmp 
    echo "Downloading gnutls archive"
    $SUDO rm -rf /tmp/gnutls-3.1.23.tar.xz* /tmp/gnutls-3.1.23
    wget http://mirrors.dotsrc.org/gcrypt/gnutls/v3.1/gnutls-3.1.23.tar.xz || \
      wget ftp://ftp.gnutls.org/gcrypt/gnutls/v3.1/gnutls-3.1.23.tar.xz
    if [ ! -f gnutls-3.1.23.tar.xz ]; then
      echo_error "Could not download gnutls source files"
      cd -
      return
    fi
    tar -xJf gnutls-3.1.23.tar.xz
    cd gnutls-3.1.23/
    ./configure --prefix=/usr
    $SUDO make uninstall || true
    $SUDO ldconfig
    )>& $gnutls_uninstall_log
}

install_asn1c_from_source(){
    asn1_install_log=$OPENAIR_DIR/cmake_targets/log/asn1c_install_log.txt
    echo_info "\nInstalling ASN1. The log file for ASN1 installation is here: $asn1_install_log "
    (
    $SUDO rm -rf /tmp/asn1c
    #GIT_SSL_NO_VERIFY=true git clone https://gitlab.eurecom.fr/oai/asn1c.git /tmp/asn1c
    GIT_SSL_NO_VERIFY=true git clone git@192.168.168.195:/home/myRepo/asn1c.git /tmp/asn1c
	cd /tmp/asn1c
    ./configure
    make -j`nproc`
    $SUDO make install
    cd -
    $SUDO ldconfig
    ) > $asn1_install_log 2>&1
}

#################################################
# 2. compile 
################################################

install_nas_tools() {
  cd $1
  if [ ! -f .ue.nvram ]; then
    echo_success "generate .ue_emm.nvram .ue.nvram"
    ./nvram --gen
  else
    [ ./nvram -nt .ue.nvram  -o ./nvram -nt .ue_emm.nvram ] && ./nvram --gen
  fi

  if [ ! -f .usim.nvram ]; then
    echo_success "generate .usim.nvram"
    ./usim --gen
  else
    [ ./usim -nt .usim.nvram ] && ./usim --gen
  fi

}


################################
# set_openair_env
###############################
set_openair_env(){
    fullpath=`readlink -f $BASH_SOURCE`
    [ -f "/.$fullpath" ] || fullpath=`readlink -f $PWD/$fullpath`
    openair_path=${fullpath%/cmake_targets/*}
    openair_path=${openair_path%/targets/*}
    openair_path=${openair_path%/openair[123]/*}    
    export OPENAIR_DIR=$openair_path
    export OPENAIR1_DIR=$openair_path/openair1
    export OPENAIR2_DIR=$openair_path/openair2
    export OPENAIR3_DIR=$openair_path/openair3
    export OPENAIR_TARGETS=$openair_path/targets
}

################################
# Function to killall the subprocesses when Ctrl-C Key is hit
###############################
function handle_ctrl_c(){
CURPID=$$
ppid=$$
arraycounter=1
echo_info "** Trapped CTRL-C. Killing all subprocesses now..."
echo_info "** Calling sync now..."
sync 
while true
do
        FORLOOP=FALSE
        # Get all the child process id
        for i in `ps -ef| awk '$3 == '$ppid' { print $2 }'`
        do
                if [ $i -ne $CURPID ] ; then
                        procid[$arraycounter]=$i
                        arraycounter=`expr $arraycounter + 1`
                        ppid=$i
                        FORLOOP=TRUE
                fi
        done
        if [ "$FORLOOP" = "FALSE" ] ; then
           arraycounter=`expr $arraycounter - 1`
           ## We want to kill child process id first and then parent id's
           while [ $arraycounter -ne 0 ]
           do  
             echo "first we send ctrl-c to program"
             $SUDO kill -INT "${procid[$arraycounter]}"
             sleep 5
             echo "Now we force kill if that didn't work"
             $SUDO kill -9 "${procid[$arraycounter]}" >/dev/null
             arraycounter=`expr $arraycounter - 1`
           done
         exit
        fi
done
}


# get from http://www.linuxjournal.com/content/validating-ip-address-bash-script
validate_ip() {

local  ip=$1
local  stat=1

if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
    OIFS=$IFS
    IFS='.'
    ip=($ip)
    IFS=$OIFS
    [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
        && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
    stat=$?
fi

return $stat
}
